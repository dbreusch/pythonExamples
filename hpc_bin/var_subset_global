#!/usr/bin/env python
# use NCO to subset ERA vars

# 08/15/12, updated for Janus filesystems

import pdb, sys, os, commands
import numpy, Nio

nargin = len(sys.argv)
if nargin < 9:
  print "Usage: var_subset_global varlist_file diryy dirmm dirdd fileyy filemm filedd filemm [indir]"
  print "  varlist_file = file (created by ncl_varlist) of vars to process"
  print "  diryy, dirmm, dirdd = year, month, day of input/output dir"
  print "  fileyy, filemm, filedd, file hh = year, month, day, hour of input/output file"
  print "  indir = source directory for input files [defaults to erai sub_spatial dir]"
  print "          names are relative to /lustre/janus_scratch/dbr/data/erai unless"
  print "          they start with a /"
  sys.exit()

# get vars-to-process list
varlist_file = sys.argv[1]

# get directory date info
diryy, dirmm, dirdd = map(int, sys.argv[2:5])

# get file date info
fileyy, filemm, filedd, filehh = map(int, sys.argv[5:9])

# base directory names
root_dir = "/lustre/janus_scratch/dbr/data/erai"
if nargin < 10:
  in_dir = root_dir+"/sub_spatial"
else:
  arg_dir = sys.argv[9]
  if arg_dir.startswith('/'):
    in_dir = arg_dir
  else:
    in_dir = root_dir+"/"+arg_dir

out_dir = root_dir+"/sub_var"

# set up directory/file patterns and pieces
dir1patt = "%4d"
dir2patt = "%4d%02d%02d"
sfc = 0
ua = 0
if "_sfc_" in varlist_file:
  filepatt = "ei.oper.an.sfc.regn128sc.%04d%02d%02d%02d"
  sfc = 1
if "_ua_" in varlist_file:
  filepatt = "ei.oper.an.pl.regn128sc.%04d%02d%02d%02d"
  ua = 1
if "_uv_" in varlist_file:
  filepatt = "ei.oper.an.pl.regn128uv.%04d%02d%02d%02d"
if "_fc_" in varlist_file:  # CHECK FILE PATTERN!!!
  filepatt = "ei.oper.fc.sfc.regn128sc.%04d%02d%02d%02d"

dir1 = dir1patt % diryy
dir2 = dir2patt % (diryy, dirmm, dirdd)
fn   = filepatt % (fileyy, filemm, filedd, filehh)

xfn = in_dir+"/"+dir1+"/"+dir2+"/"+fn
ncl_cvt = 0
if not os.path.exists( xfn+".nc" ):
  if not os.path.exists( xfn+".grb" ):
    print "Input file not found with either .nc or .grb extension"
    sys.exit()
  else:
    ifn = xfn+".grb"
    ncl_dir = "/lustre/janus_scratch/dbr/tmp"
    ncl_cmd = "ncl_convert2nc "+ifn+" -o "+ncl_dir
    os.system( ncl_cmd )
    ifn = ncl_dir+"/"+fn+".nc"
    ncl_cvt = 1
else:
  ifn = xfn+".nc"

odir = out_dir+"/"+dir1+"/"+dir2
if not os.path.exists( odir ):
  try:
    os.makedirs( odir )
  except OSError:
    print "Caught makedir of existing dir "+dir2

xfn = odir+"/"+fn
tempofn1 = xfn+"_tmp1.nc"
tempofn2 = xfn+"_tmp2.nc"
tempncap = xfn+"_ncap"
ofn = xfn+".nc"

# open input file and get var info
ncfile = Nio.open_file( ifn, "r" )
ncvars = ncfile.variables

# get list of variables of interest
ifile = open( varlist_file, "r" )
varlist = ifile.readlines()
ifile.close()

# build list of vars to process
# col 1 = standard name (across data sources)
# col 2 = short version of name in dataset
# col 3 = name as found in the dataset (possibly generated by ncl_convert2nc)
allvarslist = []
for ln in varlist:
  vlist = ln.split()
  custname = vlist[0]
  if custname.startswith("#"):
    continue
  fullname = vlist[2]

  # try to handle lat/lon that may have extra chars at end
  # e.g., g4_lat_0 vs. g4_lat
  if fullname in ncvars:
    allvarslist.append( fullname )
  else:
#    pdb.set_trace()
    tempname = fullname[:-2] # try dropping last 2 chars
    if tempname in ncvars:
      allvarslist.append( tempname )
    else:
      for q in range(0,4): # try adding chars
        tempname = "%s_%d" % (fullname, q)
        if tempname in ncvars:
          allvarslist.append( tempname )
          break

#pdb.set_trace()
# use ncks to subset vars to new file
nco_cmd = "ncks -O -v "
for v in allvarslist:
  nco_cmd = nco_cmd+v
  if not v == allvarslist[-1]:
    nco_cmd = nco_cmd+","
nco_cmd = nco_cmd+" "+ifn+" -o "+tempofn1
os.system( nco_cmd )

if sfc == 1:
  # adjust some variable values
  ofile = open( tempncap, "w" )
  ofile.write( "Z_GDS4_SFC = float(Z_GDS4_SFC / 9.81);\n" )
  ofile.write( "MSL_GDS4_SFC = float(MSL_GDS4_SFC / 100);\n" )
  ofile.write( "SP_GDS4_SFC = float(SP_GDS4_SFC / 100);\n" )
  ofile.close()
  cmd = "ncap2 -O -S "+tempncap+" "+tempofn1+" "+tempofn2
  os.system( cmd )

  # fix attributes of above
  cmd = 'ncatted -a long_name,Z_GDS4_SFC,o,c,"Geopotential height" '+tempofn2
  os.system( cmd )
  cmd = 'ncatted -a units,Z_GDS4_SFC,o,c,"m" '+tempofn2
  os.system( cmd )
  cmd = 'ncatted -a units,MSL_GDS4_SFC,o,c,"hPa" '+tempofn2
  os.system( cmd )
  cmd = 'ncatted -a units,SP_GDS4_SFC,o,c,"hPa" '+tempofn2
  os.system( cmd )

  cmd = "mv "+tempofn2+" "+tempofn1
  os.system( cmd )

if ua == 1:
  # adjust some variable values
  ofile = open( tempncap, "w" )
  ofile.write( "Z_GDS4_ISBL = float(Z_GDS4_ISBL / 9.81);\n" )
  ofile.close()
  cmd = "ncap2 -O -S "+tempncap+" "+tempofn1+" "+tempofn2
  os.system( cmd )

  # fix attributes of above
  cmd = 'ncatted -a long_name,Z_GDS4_ISBL,o,c,"Geopotential height" '+tempofn2
  os.system( cmd )
  cmd = 'ncatted -a units,Z_GDS4_ISBL,o,c,"m" '+tempofn2
  os.system( cmd )

  cmd = "mv "+tempofn2+" "+tempofn1
  os.system( cmd )

# move temp file to final output file
cmd = "mv "+tempofn1+" "+ofn
os.system( cmd )

# finish up:  clean up temp files as needed
if os.path.exists( tempofn1 ):
  os.unlink( tempofn1 )
if os.path.exists( tempofn2 ):
  os.unlink( tempofn2 )
if os.path.exists( tempncap ):
  os.unlink( tempncap )
if ncl_cvt == 1:
  if os.path.exists( ifn ):
    os.unlink( ifn )
