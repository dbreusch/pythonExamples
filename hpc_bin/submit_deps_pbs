#!/usr/bin/env python
# submit a group of jobs in serial dependency
# jobs identified by command line wildcard pattern

import pdb, sys, os, commands
from glob import glob

nargin = len( sys.argv )
if nargin < 2:
  print "Usage: submit_deps [-h | -P] joblist"
  print "  joblist = args indicating jobs to submit"
  print "    if first arg is -h, the first job is submitted on hold"
  print "    if first arg is -P, jobs are submitted with no dependencies"
  print "      These args are mutually exclusive!!!"
  print "    otherwise, if first is numeric, this is used as base job for"
  print "    the first job submitted"
  sys.exit()

# get list of jobs to process
jobs_list = sys.argv[1:]
#print jobs_list

# check for flag args
# '-h' and '-P' are mutually exclusive with '-h' having priority
if '-h' in jobs_list:
  if '-P' in jobs_list:
    print "Ignoring '-P' because '-h' already specified"
    jobs_list.remove( '-P' )

# check for "hold" as first argument
hld_job_flag = 0
par_job_flag = 0
if jobs_list[0] == '-h':
  hld_job = jobs_list[0]
  hld_job_flag = 1
  jobs_list.remove( hld_job )
else:
  # check for "parallel" as first argument
  if hld_job_flag == 0:
    if jobs_list[0] == '-P':
      par_job = jobs_list[0]
      par_job_flag = 1
      jobs_list.remove( par_job )

# attempting to do robust way to find the PBS server name
# 1. get output of PBS server status command (expected to be
#    three lines (header, dashes, data)
# 2. split that into individual items
# 3. look for a entries of at least four dashes and assume first
#    one is the length per line
# 4. find index of that item
# 5. multiply by 2 to get start of next line, i.e., the server name!
# note: using full path to qstat to avoid alias clash
qinfo = commands.getoutput( "/glade/u/apps/ch/opt/usr/bin/qstat -B" )
qlines = qinfo.split()
item = filter(lambda x:'----' in x,qlines)[0]
ix = qlines.index(item)
server = qlines[ix*2]

dep_job_flag = 0
if jobs_list[0].isdigit():
  dep_job = jobs_list[0]
  dep_job_flag = 1
  jobs_list.remove( dep_job )
  dep_job = dep_job+"."+server

# build list of job files by expanding any/all wildcards on command line
# into new job file names
wclist = ['*', '?', '[', ']']
new_list = []
for job in jobs_list:
  globlist = []
  if any( st in job for st in wclist ):
    print "expanding wildcard(s) in "+job
    pp = job.split('/')
    if len( pp ) > 1:
      dirs = sorted( glob( pp[0] ) )
      fnpatt = '/'.join( pp[1:] )
      for d in dirs:
        os.chdir( d )
        fns = sorted( glob( fnpatt ) )
        if len( fns ) == 0:
#          pdb.set_trace()
          print "No jobs match filename pattern"
          sys.exit()
        for f in fns:
          newjob = d+"/"+f
          globlist.append( newjob )
        os.chdir('..')
      if len(globlist) > 0:
        new_list.extend( globlist )
      else:
        s = '%s' % ', '.join(map(str, jobs_list))
        print "Job list '"+s+"' empty"
        sys.exit()
    else:
      fns = sorted( glob( pp[0] ) )
      if len( fns ) == 0:
#        pdb.set_trace()
        print "No jobs match filename pattern"
        sys.exit()
      else:
        new_list.extend( fns )
  else:
    new_list.append( job )

if len( new_list ) > 0:
  jobs_list = new_list

# submit all the jobs
i = 1
print "Submitting "+str(len(jobs_list))+" jobs"
for job in jobs_list:
  print job
  cmd = "qsub"
  if i == 1:  # first job checks
    if hld_job_flag > 0: # hold first job if '-h' flag is set
      cmd = cmd+" -h"
    if dep_job_flag > 0:  # is there a dependency job #?
#      cmd = cmd+" -W depend=after:"+dep_job
      cmd = cmd+" -W depend=afterok:"+dep_job

  if i > 1: # add dependency on previous job
    if par_job_flag == 0:
#      cmd = cmd+" -W depend=after:"+jobid+"."+server
      cmd = cmd+" -W depend=afterok:"+jobid+"."+server
  if "/" in job:
    # dirname,jobname = job.split('/')
    jsplit = job.split('/')
    jobname = jsplit[-1]
    cdircnt = len( jsplit )
    while len(jsplit) > 1:
      os.chdir( jsplit[0] )
      jsplit = jsplit[1:]
    cmd = cmd+" "+jobname
    s1 = commands.getoutput( cmd )
    for j in range( cdircnt-1 ):
      os.chdir('..')
  else:
    cmd = cmd+" "+job
    s1 = commands.getoutput( cmd )

  # get job id from output
#  pdb.set_trace()
  jobid = s1.split('.')[0]
#  jobid = s2.strip('<>')
  if not jobid.isdigit():
    print "Submit failed, exiting"
    print 'qsub returned "'+s1+'"'
    sys.exit()

  print jobid+": "+cmd
  if i == 1:
    root_job = jobid

  i += 1

if hld_job_flag > 0:
  print "Root job "+root_job+" submitted on hold"
if dep_job_flag > 0:
  print "Root job "+root_job+" dependent on "+dep_job
