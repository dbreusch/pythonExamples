#!/usr/bin/env python
# use NCO to rename variables to standard format.
# renames are done IN PLACE, no new output file is created!!

# 08/15/12, updated for Janus filesystems

import pdb, sys, os, commands
import numpy, Nio

nargin = len(sys.argv)
if nargin < 9:
  print "Usage: var_rename_global varlist_file diryy dirmm dirdd fileyy filemm filedd filehh [indir]"
  print "  varlist_file = file (created by ncl_varlist) of vars to process"
  print "  diryy, dirmm, dirdd = year, month, day of input/output dir"
  print "  fileyy, filemm, filedd, filehh = year, month, day, hour of input/output file"
  print "  indir = source directory for input files [defaults to erai sub_var dir]"
  print "          names are relative to /lustre/janus_scratch/dbr/data/erai unless"
  print "          they start with a /"
  sys.exit()

# get vars-to-process list
varlist_file = sys.argv[1]
tfn = os.path.basename( varlist_file )
file_type = tfn.split('_')[1]

# get directory date info
if file_type in ("sfc", "ua", "uv"):
  diryy, dirmm, dirdd = map(int, sys.argv[2:5])
else:
  diryy = int( sys.argv[2] )
  dirmm = int( sys.argv[3] )
  fcvar = sys.argv[4] # this will be a string!

if file_type in ("sfc", "ua", "uv"):
  # get file date info (but ignore args for forecast files)
  fileyy, filemm, filedd, filehh = map(int, sys.argv[5:9])

# base directory names
root_dir = "/lustre/janus_scratch/dbr/data/erai"
if nargin < 10:
  in_dir = root_dir+"/sub_var"
else:
  arg_dir = sys.argv[9]
  if arg_dir.startswith('/'):
    in_dir = arg_dir
  else:
    in_dir = root_dir+"/"+arg_dir
alt_in_dir = os.path.normpath( in_dir+"/../sub_spatial" )

# set up file patterns and create filename
if file_type in ("sfc", "ua", "uv"):
  if "_sfc_" in varlist_file:
    filepatt = "ei.oper.an.sfc.regn128sc.%04d%02d%02d%02d"
  elif "_ua_" in varlist_file:
    filepatt = "ei.oper.an.pl.regn128sc.%04d%02d%02d%02d"
  elif "_uv_" in varlist_file:
    filepatt = "ei.oper.an.pl.regn128uv.%04d%02d%02d%02d"
  fn   = filepatt % (fileyy, filemm, filedd, filehh)
elif "_fc_" in varlist_file:
  filepatt = "ei.oper.fc.sfc.regn128sc.%s.%04d%02d"
  fn   = filepatt % (fcvar, diryy, dirmm)
else:
  print "Unknown file type provided"
  sys.exit()

# set up directory patterns and create dirnames
dir1patt = "%4d"
dir1 = dir1patt % diryy
if file_type in ("sfc", "ua", "uv"):
  dir2patt = "%4d%02d%02d"
  dir2 = dir2patt % (diryy, dirmm, dirdd)
  xfn = os.path.normpath(in_dir+"/"+dir1+"/"+dir2+"/"+fn)
else:
  dir2patt = "%4d%02d"
  dir2 = dir2patt % (diryy, dirmm)
  xfn = os.path.normpath(in_dir+"/"+dir1+"/"+dir2+"/"+fn)

# look for input file in default location.  if it's not there,
# try the alternate location.  fail if not there either.
ifn = xfn+".nc"
if not os.path.exists( ifn ):
  alt_xfn = alt_in_dir+"/"+dir1+"/"+dir2+"/"+fn
  alt_ifn = alt_xfn+".nc"
  if not os.path.exists( alt_ifn ):
    print "Input file "+ifn+" not found, exiting"
    sys.exit()
  else:
    cmd = "cp "+alt_ifn+" "+ifn
    os.system( cmd )

# open input file and get var info
ncfile = Nio.open_file( ifn, "r" )
ncvars = ncfile.variables
ncdims = ncfile.dimensions

# get list of variables of interest
ifile = open( varlist_file, "r" )
varlist = ifile.readlines()
ifile.close()

# build list of vars to process
# field 1 = standard name (across data sources)
# field 2 = short version of name in dataset
# field 3 = name as found in the dataset (e.g., as generated by ncl_convert2nc)
rename_list = []
for ln in varlist:
  fields = ln.split()
  custname = fields[0]
  if custname.startswith("#"):
    continue
  fullname = fields[2]

  if fullname <> custname:  # need to rename since names don't match
    if fullname in ncvars:
      print "Rename var "+fullname+" to "+custname
      rename_list.append([ "-v", fullname, custname ])
    else:
      # figure out the variable name
      tempname = fullname[:-2]  # try dropping last 2 chars
      if tempname in ncvars:
        print "Rename var "+tempname+" to "+custname
        rename_list.append( ["-v", tempname, custname] )
      else:
        for q in range(0,4):  # try adding chars
          tempname = "%s_%d" % (fullname, q)
          if tempname in ncvars:
            print "Rename var "+tempname+" to "+custname
            rename_list.append( ["-v", tempname, custname] )
            break

#    pdb.set_trace()
    isdim = ('lat' in fullname) or ('lon' in fullname) or ('lv_ISBL0' in fullname) or ('lev' in fullname)
    if isdim:
      if fullname in ncdims:
        print "Rename dim "+fullname+" to "+custname
        rename_list.append([ "-d", fullname, custname ])
      else:
        # figure out the dimension name
        tempname = fullname[:-2]  # try dropping last 2 chars
        if tempname in ncdims:
          print "Rename dim "+tempname+" to "+custname
          rename_list.append( ["-d", tempname, custname] )
        else:
          for q in range(0,4):  # try adding chars
            tempname = "%s_%d" % (fullname, q)
            if tempname in ncdims:
              print "Rename dim "+tempname+" to "+custname
              rename_list.append( ["-d", tempname, custname] )
              break

# check that renames are actually needed
if len(rename_list) == 0:
  print "No renames needed"
  sys.exit()

# use ncrename to do desired var renames
nco_cmd = "ncrename -O"
var_arg = ""
dim_arg = ""
for rnm in rename_list:
  flag = rnm[0]
  oldname = rnm[1]
  newname = rnm[2]
  var_arg = var_arg+" "+flag+" "+oldname+","+newname
#  if newname in ("lat", "lon", "plvl"):
#    if oldname in ("XLAT", "XLONG"):
#      continue
#    dim_arg = dim_arg+" -d "+oldname+","+newname
nco_cmd = nco_cmd+dim_arg+var_arg+" "+ifn
#print nco_cmd
os.system( nco_cmd )
