#!/usr/bin/env python
# use NCO to add _FillValue to variables, if needed
# changes are done IN PLACE, no new output file is created!!

# 08/15/12, updated for Janus filesystems

import pdb, sys, os, commands
import numpy, Nio

nargin = len(sys.argv)
if nargin < 9:
  print "Usage: var_fillvalue varlist_file diryy dirmm dirdd fileyy filemm filedd filemm [indir]"
  print "  varlist_file = file (created by ncl_varlist) of vars to process"
  print "  diryy, dirmm, dirdd = year, month, day of input/output dir"
  print "  fileyy, filemm, filedd, file hh = year, month, day, hour of input/output file"
  print "  indir = source directory for input files [defaults to erai sub_spatial dir]"
  print "          names are relative to /lustre/janus_scratch/dbr/data/erai unless"
  print "          they start with a /"
  sys.exit()

# get vars-to-process list
varlist_file = sys.argv[1]

# get directory date info
diryy, dirmm, dirdd = map(int, sys.argv[2:5])

# get file date info
fileyy, filemm, filedd, filehh = map(int, sys.argv[5:9])

# base directory names
root_dir = "/lustre/janus_scratch/dbr/data/erai"
if nargin < 10:
  in_dir = root_dir+"/sub_spatial"
else:
  arg_dir = sys.argv[9]
  if arg_dir.startswith('/'):
    in_dir = arg_dir
  else:
    in_dir = root_dir+"/"+arg_dir

# set up directory/file patterns and pieces
dir1patt = "%4d"
dir2patt = "%4d%02d%02d"

if "_sfc_" in varlist_file:
  filepatt = "ei.oper.an.sfc.regn128sc.%04d%02d%02d%02d"
elif "_ua_" in varlist_file:
  filepatt = "ei.oper.an.pl.regn128sc.%04d%02d%02d%02d"
elif "_uv_" in varlist_file:
  filepatt = "ei.oper.an.pl.regn128uv.%04d%02d%02d%02d"
elif "_fc_" in varlist_file:  # CHECK FILE PATTERN!!!
  filepatt = "ei.oper.fc.sfc.regn128sc.%04d%02d%02d%02d"

dir1 = dir1patt % diryy
dir2 = dir2patt % (diryy, dirmm, dirdd)
fn   = filepatt % (fileyy, filemm, filedd, filehh)

xfn = in_dir+"/"+dir1+"/"+dir2+"/"+fn
ifn = xfn+".nc"
if not os.path.exists( ifn ):
  print "Input file "+ifn+" not found, exiting"
  sys.exit()

# open input file and get var info
ncfile = Nio.open_file( ifn, "r" )
ncvars = ncfile.variables
ncdims = ncfile.dimensions

# get list of variables of interest
ifile = open( varlist_file, "r" )
varlist = ifile.readlines()
ifile.close()

# build list of vars to process
# col 1 = standard name (across data sources)
# col 2 = short version of name in dataset
# col 3 = name as found in the dataset (possibly generated by ncl_convert2nc)
vars_chg_list = []
for ln in varlist:
  files = ln.split()
  custname = files[0]
  fullname = files[2]
  if custname.startswith("#"):
    continue
  # ignore dimension vars
  if custname in ncdims:
    continue
  if fullname in ncdims:
    continue

  if fullname in ncvars:
    vars_chg_list.append(fullname)
  elif custname in ncvars:
    vars_chg_list.append(custname)

#pdb.set_trace()
# now check the vars for FillValues and add with ncatted if necessary
for v in vars_chg_list:
  nco_cmd = "ncatted -h -O "
  ncvar = ncvars[ v ]
  ncattr = ncvar.attributes
  if "_FillValue" in ncattr:
    continue
  fillval = str(1.e20)

  # get the var's "typecode", i.e., float or double
  tc = ncvar.typecode()

  nco_cmd = nco_cmd+"-a _FillValue,"+v+",o,"+tc+","+fillval+" "+ifn
  print "Adding _FillValue to "+v
  os.system( nco_cmd )
